{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Barton_Student_Advanced_Master_DoNotEdit_Logistic.ipynb","provenance":[{"file_id":"1zfD55NaKKdyU3ZUqN3XDTr1jS4pnrYA7","timestamp":1591739739454}],"collapsed_sections":["HP9U_AO8stAq","CwIq3r8RENiw"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"eN6PSgaoEPr9","colab_type":"text"},"source":["## Instructor Led Discussion"]},{"cell_type":"markdown","metadata":{"id":"HP9U_AO8stAq","colab_type":"text"},"source":["### Introduction to Breast Cancer Biopsy Classification\n","\n","In this project, imagine that your colleague, an oncologist (cancer doctor), is working in a major hospital that specializes in treating breast cancers. Breast cancer tumors are very complicated at the cellular level, and this makes determining whether a patient's tumor is malignant (dangerous) or benign (not dangerous) a challenge. Your task will be to build a classifier that can determine whether a sample is malignant or benign to help your colleague!\n","\n","Every patient that arrives at the hospital undergoes a biopsy of their tumor. This means that a small sample of the tumor is taken from the patient and various metrics are recorded about it, including: radius, texture, perimeter, area, smoothness, compactness, concavity, concave points, symmetry, and fractal dimension. \n","\n","Using a large dataset of labeled biospy samples from breast cancer tumors, you will build your binary classification model to determine whether a tumor is malignant or benign based on these features. Then, this model can help you to better determine diagnoses for new patients who arrive at the hospital.\n"]},{"cell_type":"markdown","metadata":{"id":"CwIq3r8RENiw","colab_type":"text"},"source":["## Today...\n","We will explore together the steps that you could take to help your friend solve this problem!\n","\n","#### 1. Background and data exploration\n","\n","- Exercise 1 (exploring the data)\n","\n","#### 2. Simple boundary classifier\n","\n","- Exercise 2 (separating on a boundary)\n","- Exercise 3 (precision, recall, accuracy)\n","\n","#### 3. Modifying with logistic regression\n","\n","- Exercise 4 (single feature logistic regression)\n","- Exercise 5 (multiple feature logistic regression)\n","\n","#### 4. Decision trees walkthrough\n","\n"]},{"cell_type":"markdown","metadata":{"id":"t5WlU9mlAtTt","colab_type":"text"},"source":["# Background and data exploration"]},{"cell_type":"markdown","metadata":{"id":"gOTZCNwKs8Bc","colab_type":"text"},"source":["## Diagnosing cancer with biopsies\n"]},{"cell_type":"markdown","metadata":{"id":"ei8za5s3tVw8","colab_type":"text"},"source":["Before we dive into building a classifier for breast cancer tumors, it's important to understand how the data are generated and gain intuition for what the various features mean.\n","\n","![alt text](https://www.rxdatascience.com/hubfs/Raj%20Files/es1.jpg)\n","\n","The above image is an example of cancerous (malignant) breast cells next to benign cells. These cells were removed as part of a biopsy of a tumor from a patient in which a small amount of fluid/tissue from the tumor is sampled with a special needle. Then, the cells in this sample are strained with different dyes to visualize their shapes, how much DNA they have, etc. All these properties can help to give hints as to whether cells are rapidly dividing cancer cells or not. \n","\n","Our dataset reports 10 different features of the biopsies. Here's what each means:\n","\n","1. $Radius$: Average distance from the center of the cell's nucleus to its perimeter.\n","2. $Perimeter$: Total distance between points defining the cell's nuclear perimeter.\n","3. $Area$: Nuclear area is measured by counting the number of pixels on the interior of the nucleus and adding one-half of the pixels in the perimeter.\n","\n","The following image should give a visual to what these cell nucleus features look like: \n","\n","![perimeter](https://drive.google.com/uc?export=view&id=1-U43OAojYbMY9gIlpvLHPNr3V2saqqHJ)\n","\n","4. $Compactness$: Calculated as the compactness of the cell nuclei using the\n","formula $perimeter^2/area$\n","5. $Smoothness$: Measures the smoothness of a nuclear contour by measuring the difference between the length of a radial line and the mean length of the lines surrounding it. The image below demonstrates this:\n","\n","![alt text](https://drive.google.com/uc?export=view&id=10GokzG7KDKxClJwHPIuIcr3ivvWGRetY)\n","\n","\n","The paper that first detailed these measurements for this dataset can be found here for more information: https://pdfs.semanticscholar.org/1c4a/4db612212a9d3806a848854d20da9ddd0504.pdf \n"]},{"cell_type":"markdown","metadata":{"id":"dYeVd9eptE31","colab_type":"text"},"source":["## Breast cancer diagnostic dataset\n","\n","The dataset we will use to train our model is called the Breast Cancer Wisconsin (Diagnostic) Data Set. It consists of 569 biopsy samples, just like the ones described above, from breast cancer tumors. \n","\n","Each biopsy sample in the dataset is labeled with an ID number and whether or not the tumor it came from is malignant (M) or benign (B). Each sample also has 10 different features associated with it, some of which are described above. Remember that each feature value for a given biopsy sample is a real-valued number.\n","\n","Think: what sorts of features would you expect to be different between a rapidly growing, malignant cancer cell and a healthy one? Why?"]},{"cell_type":"code","metadata":{"id":"zTLBQUJZJpEU","colab_type":"code","colab":{}},"source":["#@title Run this to download your data! { display-mode: \"form\" }\n","# Load the data!\n","import gdown \n","import pandas as pd\n","from sklearn import metrics\n","gdown.download('https://drive.google.com/uc?id=1grV8hSxULsGvnbwEMPjPaknccfIOlcoB','cancer_data.csv',True);\n","data = pd.read_csv('cancer_data.csv')\n","data['diagnosis'].replace({'M':1, 'B':0}, inplace = True)\n","data.to_csv('cancer_data.csv')\n","del data"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LSpUGH4NvaUk","colab_type":"text"},"source":["## Loading our annotated dataset\n","\n","The first step in building our breast cancer tumor classification model is to load in the dataset we'll use to \"teach\" (or \"train\") our model."]},{"cell_type":"code","metadata":{"id":"LmyUG5GrvdPf","colab_type":"code","colab":{}},"source":["# First, import helpful Python tools for loading/navigating data\n","import os             # Good for navigating your computer's files \n","import numpy as np    # Great for lists (arrays) of numbers\n","import pandas as pd   # Great for tables (google spreadsheets, microsoft excel, csv)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Cu2tGYpv5AZ","colab_type":"code","colab":{}},"source":["data_path  = 'cancer_data.csv'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TE3BWCCJv8TZ","colab_type":"code","colab":{}},"source":["# Use the 'pd.read_csv('file')' function to read in read our data and store it in a variable called 'dataframe'\n","dataframe = pd.read_csv(data_path)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YKx4euGqwHpS","colab_type":"text"},"source":[" ## Looking at our dataset\n"," \n"," #### Exercise 1\n"," \n"," A key step in machine learning (and coding in general!) is to view the structure and dimensions of our new dataframe, which stores all our training data from the tumor biopsies. We want to confirm that the size of our table is correct, check out the features present, and get a more visual sense of what it looks like overall."]},{"cell_type":"code","metadata":{"id":"eUBEd-10v-Ro","colab_type":"code","colab":{}},"source":["# Let's look at just a few of the biopsy sample features to start by subsetting our 'dataframe'\n","dataframe = dataframe[['diagnosis','radius_mean','area_mean', 'radius_se', 'area_se', 'smoothness_mean','smoothness_se']]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"44xNblKYVRHh","colab_type":"text"},"source":["You can think of dataframes like Google or Microsoft Excel spreadsheets (large tables with row/column headers) \n","\n","**Use the 'head()' method to show the first five rows of the table and their corresponding column headers (our 7 biopsy features!)**"]},{"cell_type":"code","metadata":{"id":"sKRxaP1qweIz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"dc4ca986-f840-4166-f2ff-d9278646b504","executionInfo":{"status":"ok","timestamp":1591739699901,"user_tz":420,"elapsed":1359,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["# YOUR CODE HERE: \n","dataframe.head()\n","# END CODE"],"execution_count":158,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>area_mean</th>\n","      <th>radius_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_mean</th>\n","      <th>smoothness_se</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>17.99</td>\n","      <td>1001.0</td>\n","      <td>1.0950</td>\n","      <td>153.40</td>\n","      <td>0.11840</td>\n","      <td>0.006399</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>20.57</td>\n","      <td>1326.0</td>\n","      <td>0.5435</td>\n","      <td>74.08</td>\n","      <td>0.08474</td>\n","      <td>0.005225</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>19.69</td>\n","      <td>1203.0</td>\n","      <td>0.7456</td>\n","      <td>94.03</td>\n","      <td>0.10960</td>\n","      <td>0.006150</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>11.42</td>\n","      <td>386.1</td>\n","      <td>0.4956</td>\n","      <td>27.23</td>\n","      <td>0.14250</td>\n","      <td>0.009110</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>20.29</td>\n","      <td>1297.0</td>\n","      <td>0.7572</td>\n","      <td>94.44</td>\n","      <td>0.10030</td>\n","      <td>0.011490</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   diagnosis  radius_mean  area_mean  ...  area_se  smoothness_mean  smoothness_se\n","0          1        17.99     1001.0  ...   153.40          0.11840       0.006399\n","1          1        20.57     1326.0  ...    74.08          0.08474       0.005225\n","2          1        19.69     1203.0  ...    94.03          0.10960       0.006150\n","3          1        11.42      386.1  ...    27.23          0.14250       0.009110\n","4          1        20.29     1297.0  ...    94.44          0.10030       0.011490\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":158}]},{"cell_type":"markdown","metadata":{"id":"tilXEPhVwkjk","colab_type":"text"},"source":["Our colleague has given us documentation on what each feature column means. Specifically:\n","\n","* $diagnosis$: Whether or not the tumor was diagnosed as malignant (M) or benign (B).\n","* $radius$_$mean$: The radius data feature, averaged across cells in that particular biopsy\n","* $area$_$mean$: The area data feature, averaged across cells in that particular biopsy\n","* $radius$_$se$: The standard error of the radius data feature for cells in that particular biopsy\n","* $area$_$se$: The standard error of the area data feature for cells in that particular biopsy\n","* $smoothness$_$mean$: The smoothness feature, averaged across cells in that particular biopsy\n","* $smoothness$_$se$: The standard error of the smoothness data feature for cells in that particular biopsy\n","\n","Recall that the term mean refers to taking an average (summing the values for each cell and dividing by the total number of cells observed in that biopsy). Additionally, standarded error gives a sense of the standard deviation (how much variance there is between cells in that biopsy for that feature). "]},{"cell_type":"code","metadata":{"id":"0-SoD9EQw5Ie","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"7feb61ad-4904-435e-b5af-3d57e81ec192","executionInfo":{"status":"ok","timestamp":1591739699902,"user_tz":420,"elapsed":1159,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["# Next, we'll use the 'info' method to see the data types of each column\n","dataframe.info()"],"execution_count":159,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 569 entries, 0 to 568\n","Data columns (total 7 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   diagnosis        569 non-null    int64  \n"," 1   radius_mean      569 non-null    float64\n"," 2   area_mean        569 non-null    float64\n"," 3   radius_se        569 non-null    float64\n"," 4   area_se          569 non-null    float64\n"," 5   smoothness_mean  569 non-null    float64\n"," 6   smoothness_se    569 non-null    float64\n","dtypes: float64(6), int64(1)\n","memory usage: 31.2 KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FM41uioFw_Ow","colab_type":"text"},"source":["**Question: We see that these are all numeric data types. Does this make sense? Why?**\n"]},{"cell_type":"markdown","metadata":{"id":"ZOflJPi5uF5h","colab_type":"text"},"source":["# Simple boundary classifier\n","\n","Great! You've gotten a sense of the dataset we will use to train our classification model. Our approach will be to first start simple -- let's look at just one feature of the data samples and see how well its value predicts M vs. B for our labeled dataset. "]},{"cell_type":"markdown","metadata":{"id":"Wj5Tyew6uL8q","colab_type":"text"},"source":["## Can mean radius predict diagnosis?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"LP0-9c4VxsJ7","colab":{}},"source":["# First, we'll import some handy data visualization tools\n","import seaborn as sns\n","import matplotlib.pyplot as plt "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IULVFMLhyLwN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":386},"outputId":"7206169e-39ba-46d7-9b6e-f32dbe7c837d","executionInfo":{"status":"ok","timestamp":1591739700278,"user_tz":420,"elapsed":1102,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["# To see how well mean radius correlates with diagnosis, we'll plot the data\n","# separated based on diagnosis category on the x-axis and have the points' y-value\n","# be its mean radius value\n","\n","sns.catplot(x = 'diagnosis', y = 'radius_mean', data = dataframe)"],"execution_count":161,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f99760ef6d8>"]},"metadata":{"tags":[]},"execution_count":161},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mDlWi8LTKgQu","colab_type":"text"},"source":["**Question:** How would you interpret what is going on in the chart above?\n"]},{"cell_type":"markdown","metadata":{"id":"sFG1rBi8zq0n","colab_type":"text"},"source":["## Classification is just drawing boundaries!\n","Next, we might want to check just how well mean radius can be used to classify, or separate, the datapoints in either category\n","Let's pick a boundary value for the radius mean and see how well it separates the data"]},{"cell_type":"code","metadata":{"id":"1oYBTJsvyaC6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"bf5b252a-9035-43cd-b951-654f934f2ffb","executionInfo":{"status":"ok","timestamp":1591739700626,"user_tz":420,"elapsed":1222,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["boundary = 10\n","sns.scatterplot(x = 'radius_mean', y = 'diagnosis', data = dataframe)\n","plt.plot([boundary, boundary], [0, 1], 'g', linewidth = 6)"],"execution_count":162,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f9976107320>]"]},"metadata":{"tags":[]},"execution_count":162},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hXww4S6cNeo7","colab_type":"text"},"source":["**Question:** Does this boundary value separate the data well?\n"]},{"cell_type":"markdown","metadata":{"id":"6ZmcQ_vGWZnR","colab_type":"text"},"source":["Using a boundary value, we can build a boundary classifier function. This function will take in a boundary value of our choosing and then classify the data points based on whether or not they are above or below the boundary.\n","\n","#### Building the boundary classifier\n","#### Exercise (optional)\n","Here we build the function that takes in a target boundary (value of radius mean). Write a function to implement a boundary classifier. Think about what the return 'type' of this classifier might be. The parameter target_boundary refers to the boundary value, and x is a pandas Series data type object (a labeled 1D array).\n","\n","\n","```\n","def boundary_classifier(target_boundary,x):\n","          arr = []\n","          for i in x:\n","            if i > target_boundary:\n","              arr.append(True)\n","            else:\n","              arr.append(False)\n","          return arr\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"f3uENLCTxldP","colab_type":"code","colab":{}},"source":["def boundary_classifier(target_boundary,x):\n","          arr = []\n","          for i in x:\n","            if i > target_boundary:\n","              arr.append(True)\n","            else:\n","              arr.append(False)\n","          return arr"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kBttJRoNYYdJ","colab_type":"text"},"source":["The code below chooses a boundary and runs it for us. "]},{"cell_type":"code","metadata":{"id":"0PiRMX-xKjiA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"eeaded5e-d76e-42cc-9ea3-992236cca36f","executionInfo":{"status":"ok","timestamp":1591739700630,"user_tz":420,"elapsed":841,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["chosen_boundary = 15\n","y_pred = boundary_classifier(chosen_boundary, dataframe['radius_mean'])\n","dataframe['predicted'] = y_pred\n","y_true = dataframe['diagnosis']\n","sns.scatterplot(x = 'radius_mean', y = 'diagnosis', hue = 'predicted', data = dataframe)\n","plt.plot([chosen_boundary, chosen_boundary], [0, 1], 'g', linewidth = 6)\n"],"execution_count":164,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f9976111a90>]"]},"metadata":{"tags":[]},"execution_count":164},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ro6toAITfrp1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"e7980863-fc93-45da-d4f3-2a0ebc43d9b9","executionInfo":{"status":"ok","timestamp":1591739700631,"user_tz":420,"elapsed":762,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["accuracy = metrics.accuracy_score(y_true,y_pred)\n","accuracy"],"execution_count":165,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8892794376098418"]},"metadata":{"tags":[]},"execution_count":165}]},{"cell_type":"markdown","metadata":{"id":"pkVDw3wHZMD_","colab_type":"text"},"source":["**Now adjust the chosen boundary above to get the best possible 'separation'. As you do that, think about what it means for a separation to be 'good'. Try playing around with the boundary value to get the highest possible accuracy.**"]},{"cell_type":"markdown","metadata":{"id":"DJdMjjFHMA22","colab_type":"text"},"source":["## What makes a separation good?\n"]},{"cell_type":"markdown","metadata":{"id":"ddOT-6M11ru1","colab_type":"text"},"source":["### Instructor Led Discussion:\n"]},{"cell_type":"markdown","metadata":{"id":"YwOdbfoiL9pz","colab_type":"text"},"source":["\n","From exploring different boundary values for the radius mean feature, you can see that depending on which value is chosen, the data points are classified slighly differently. This brings up the question of how we can evaluate how good a classification is. \n","\n","Often, we do this by looking at the rates of true positives/true negatives/false positives/false negatives. Let's define these important terms:\n","\n","**True positive rate (TPR)**: Sometimes called sensitvity, the TPR is the proportion of actual positives that are correctly identified as such. An analogy would be the percentage of sick people who are correctly identified as having the disease in some population.\n","\n","**True negative rate (TNR)**: Sometimes called specificity, the TNR is the proportion of actual negatives that are correctly identified as such. An analogy would be the the percentage of healthy people who are correctly identified as not having the disease in some population.\n","\n","**False positive rate (FPR)**: The FPR is the proportion of actual negatives that are incorrectly identified as positives. An analogy would be the percentage of healthy people who are incorrectly identified as having the disease.\n","\n","**False negative rate (FNR)**: The FPR is the proportion of actual positives that are incorrectly identified as negatives. An analogy would be the percentage of sick people who are incorrectly identified as healthy.\n","\n","A key insight is that there is a tradeoff when trying to reduce the different types of errors. For instance, if we want to increase our TPR (thus decrease our FNR by correctly identifying more sick people), our improvements will have to increase the number of people we guess to be sick. However, such an improvement will decrease our TNR (thus inrease our FPR by guessing more healty people are sick). \n","\n","Sometimes, one type of error is worse than the others for a given problem. Other times, however, we must strike an acceptable balance between the two."]},{"cell_type":"markdown","metadata":{"id":"Koc7oPy8AASf","colab_type":"text"},"source":["![alt text](https://drive.google.com/uc?export=view&id=1S4S2MBM86D74C-Q0aPPwHzbU8iUveLKq)"]},{"cell_type":"markdown","metadata":{"id":"NzGO09WH5i2l","colab_type":"text"},"source":["### Exercise 3"]},{"cell_type":"markdown","metadata":{"id":"s_cmSK_pbjvP","colab_type":"text"},"source":["Next, let's evaluate the performance of our model quantitatively. We can visualize statistics on the number of correct vs. incorrect predictions using a plot called a Confusion Matrix.\n"]},{"cell_type":"code","metadata":{"id":"EcfsPpup9ljK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":342},"outputId":"940f8264-c1c1-4d7c-e83a-2fa81f2cbb00","executionInfo":{"status":"ok","timestamp":1591739701763,"user_tz":420,"elapsed":1217,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["#@title Run this code to create a confusion matrix. { display-mode: \"form\" }\n","#@markdown If you are curious how it works you may double-click to inspect the code.\n","\n","# Import the metrics class\n","from sklearn import metrics\n","\n","# Create the Confusion Matrix\n","y_test = dataframe['diagnosis']\n","cnf_matrix = metrics.confusion_matrix(y_test, y_pred)\n","\n","# Visualizing the Confusion Matrix\n","class_names = [0,1] # Our diagnosis categories\n","\n","fig, ax = plt.subplots()\n","# Setting up and visualizing the plot (do not worry about the code below!)\n","tick_marks = np.arange(len(class_names)) \n","plt.xticks(tick_marks, class_names)\n","plt.yticks(tick_marks, class_names)\n","sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g') # Creating heatmap\n","ax.xaxis.set_label_position(\"top\")\n","plt.tight_layout()\n","plt.title('Confusion matrix', y = 1.1)\n","plt.ylabel('Actual diagnosis')\n","plt.xlabel('Predicted diagnosis')"],"execution_count":166,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 257.44, 'Predicted diagnosis')"]},"metadata":{"tags":[]},"execution_count":166},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"wzzrWDT_cxvF","colab_type":"text"},"source":["**Question: How would you interpret the confusion matrix above? Are we doing well at the classification?**"]},{"cell_type":"markdown","metadata":{"id":"S4qbrdz6Si-K","colab_type":"text"},"source":["Let's calculate how well our model does using sklearn, specifically, we will use the following functions: \n","* `accuracy = metrics.accuracy_score(y_test, y_pred)`\n","* `precision = metrics.precision_score(y_test, y_pred)`\n","* `recall = metrics.recall_score(y_test, y_pred)`\n","\n","Make a function called `model_stats' that calculates each of these metrics and prints their values:\n","        \n","        `def model_stats(y_test, y_pred):`\n"]},{"cell_type":"code","metadata":{"id":"0xqCb1zElUUo","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE:  \n","def model_stats(y_test, y_pred):\n","  print(\"accuracy: \", metrics.accuracy_score(y_test,y_pred))\n","  print(\"precision: \", metrics.precision_score(y_test,y_pred))\n","  print(\"recall: \", metrics.recall_score(y_test,y_pred))\n","\n","\n","\n","# END CODE"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tymoFFLaJzMc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"bffaef36-0f79-4238-8d57-d8860b4a92a9","executionInfo":{"status":"ok","timestamp":1591739701765,"user_tz":420,"elapsed":874,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["model_stats(y_test, y_pred)"],"execution_count":168,"outputs":[{"output_type":"stream","text":["accuracy:  0.8892794376098418\n","precision:  0.930635838150289\n","recall:  0.7594339622641509\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8_k_JENInRys","colab_type":"text"},"source":["**Question: What does each of these values represent? What is the difference between each statistic?**"]},{"cell_type":"markdown","metadata":{"id":"sHhZeAbdupMl","colab_type":"text"},"source":["# Finding a better separation with logistic regression\n"]},{"cell_type":"markdown","metadata":{"id":"69c2JKp8Mxwi","colab_type":"text"},"source":["\n","#### Exercise 4\n","\n","Now, it's time to move away from our simple guess-and-check model and work towards implementing a an approach that can automatically find a better separation. One of the most common methods for this is called 'Logistic Regression'. \n","\n","First, we'll start by just using the radius_mean feature. "]},{"cell_type":"code","metadata":{"id":"ZEq3DYrh1nPO","colab_type":"code","colab":{}},"source":["# Let's pull our handy linear fitter from our 'prediction' toolbox: sklearn!\n","from sklearn import linear_model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZJfT1x60fZxd","colab_type":"text"},"source":["### Training Data vs Test Data\n","\n","We're splitting up our data set into groups called 'train' and 'test'. We teach our 'model' the patterns using the train data, but the whole point of machine learning is that our prediction should work on 'unseen' data or 'test' data. The function below does this for you. \n"]},{"cell_type":"code","metadata":{"id":"krQ6dJo-5yek","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split\n","\n","train_df, test_df = train_test_split(dataframe, test_size = 0.4, random_state = 1)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OOECnkKBf_tD","colab_type":"text"},"source":["Let's now take a look at the 'train' and 'test' groups:\n"]},{"cell_type":"code","metadata":{"id":"wDYAAl6xgPYO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"738795cf-c734-4e61-e889-f5cdfbea2632","executionInfo":{"status":"ok","timestamp":1591739703242,"user_tz":420,"elapsed":1682,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["print('\\n\\nTraining dataframe has %d rows'%train_df.shape[0])\n","train_df.head()"],"execution_count":171,"outputs":[{"output_type":"stream","text":["\n","\n","Training dataframe has 341 rows\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>area_mean</th>\n","      <th>radius_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_mean</th>\n","      <th>smoothness_se</th>\n","      <th>predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>164</th>\n","      <td>1</td>\n","      <td>23.270</td>\n","      <td>1686.0</td>\n","      <td>0.6642</td>\n","      <td>97.85</td>\n","      <td>0.08439</td>\n","      <td>0.004910</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>15.850</td>\n","      <td>782.7</td>\n","      <td>0.4033</td>\n","      <td>36.58</td>\n","      <td>0.08401</td>\n","      <td>0.009769</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>430</th>\n","      <td>1</td>\n","      <td>14.900</td>\n","      <td>685.0</td>\n","      <td>0.2530</td>\n","      <td>24.19</td>\n","      <td>0.09947</td>\n","      <td>0.006965</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>0</td>\n","      <td>8.598</td>\n","      <td>221.8</td>\n","      <td>0.3582</td>\n","      <td>18.39</td>\n","      <td>0.12430</td>\n","      <td>0.011930</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>427</th>\n","      <td>0</td>\n","      <td>10.800</td>\n","      <td>359.9</td>\n","      <td>0.3077</td>\n","      <td>20.20</td>\n","      <td>0.08801</td>\n","      <td>0.006543</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     diagnosis  radius_mean  ...  smoothness_se  predicted\n","164          1       23.270  ...       0.004910       True\n","13           1       15.850  ...       0.009769       True\n","430          1       14.900  ...       0.006965      False\n","61           0        8.598  ...       0.011930      False\n","427          0       10.800  ...       0.006543      False\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":171}]},{"cell_type":"code","metadata":{"id":"EMornfXPhzli","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"8db7d7f8-ce1f-4bff-a69b-45623eb51d31","executionInfo":{"status":"ok","timestamp":1591739703243,"user_tz":420,"elapsed":1617,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["print('\\n\\nTesting dataframe has %d rows'%test_df.shape[0])\n","test_df.head()"],"execution_count":172,"outputs":[{"output_type":"stream","text":["\n","\n","Testing dataframe has 228 rows\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>area_mean</th>\n","      <th>radius_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_mean</th>\n","      <th>smoothness_se</th>\n","      <th>predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>421</th>\n","      <td>0</td>\n","      <td>14.69</td>\n","      <td>656.1</td>\n","      <td>0.5462</td>\n","      <td>49.45</td>\n","      <td>0.10310</td>\n","      <td>0.009976</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>1</td>\n","      <td>13.17</td>\n","      <td>534.6</td>\n","      <td>0.2871</td>\n","      <td>24.25</td>\n","      <td>0.11580</td>\n","      <td>0.006532</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>0</td>\n","      <td>12.95</td>\n","      <td>513.7</td>\n","      <td>0.2094</td>\n","      <td>17.67</td>\n","      <td>0.10050</td>\n","      <td>0.008725</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>1</td>\n","      <td>18.31</td>\n","      <td>1041.0</td>\n","      <td>0.2577</td>\n","      <td>28.92</td>\n","      <td>0.08588</td>\n","      <td>0.002866</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>414</th>\n","      <td>1</td>\n","      <td>15.13</td>\n","      <td>719.5</td>\n","      <td>0.4681</td>\n","      <td>45.38</td>\n","      <td>0.08320</td>\n","      <td>0.006831</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     diagnosis  radius_mean  ...  smoothness_se  predicted\n","421          0        14.69  ...       0.009976      False\n","47           1        13.17  ...       0.006532      False\n","292          0        12.95  ...       0.008725      False\n","186          1        18.31  ...       0.002866       True\n","414          1        15.13  ...       0.006831       True\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":172}]},{"cell_type":"markdown","metadata":{"id":"0WuOmB45g1-B","colab_type":"text"},"source":["### Single Variable Logistic Regression\n","To start with let us set our input feature to be radius mean and our output variable to be the diagnosis. \n","\n","We will use this to build a logistic regression model to pedict the diagnosis using radius mean. We will explain what a logistic regression is shortly!"]},{"cell_type":"code","metadata":{"id":"chesGAaKNVON","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"outputId":"8abbc527-a4f8-4280-dde2-2e79f4ba1522","executionInfo":{"status":"ok","timestamp":1591739703244,"user_tz":420,"elapsed":1417,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["input_labels = ['radius_mean']\n","output_label = 'diagnosis'\n","\n","\n","x_train = train_df[input_labels]\n","print('Our x variables')\n","print(x_train.head())\n","print('\\n\\n')\n","\n","y_train = train_df[output_label]\n","print('Our y variable:')\n","print(y_train.head())"],"execution_count":173,"outputs":[{"output_type":"stream","text":["Our x variables\n","     radius_mean\n","164       23.270\n","13        15.850\n","430       14.900\n","61         8.598\n","427       10.800\n","\n","\n","\n","Our y variable:\n","164    1\n","13     1\n","430    1\n","61     0\n","427    0\n","Name: diagnosis, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_ChOPgKIi6pI","colab_type":"text"},"source":["**Make sure you know how to interpret the data above before moving forward. Be sure to ask if you are not sure :)**"]},{"cell_type":"code","metadata":{"id":"kj1LIpVT6SwY","colab_type":"code","colab":{}},"source":["# Here, we create a 'reg' object that handles the line fitting for us!\n","class_rm = linear_model.LogisticRegression()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"shsboaDEjSC_","colab_type":"text"},"source":["###Next, we want to tell our 'class_rm' object to take in my inputs (x) and my true labels (y) and fit a line that predicts y from x.\n","\n","#### Exercise: Can you place the arguments `x_train` and `y_train` correctly into this function to do this?\n","`class_rm.fit(FILL_ME_IN, FILL_ME_IN)`\n"]},{"cell_type":"code","metadata":{"id":"NfV0t3bqjtum","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"c2ebc49e-8757-4535-b572-1b89414dbaf9","executionInfo":{"status":"ok","timestamp":1591739703245,"user_tz":420,"elapsed":1112,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["### YOUR CODE HERE\n","class_rm.fit(x_train, y_train)\n","### END CODE"],"execution_count":175,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":175}]},{"cell_type":"markdown","metadata":{"id":"M_keLGwQjzsu","colab_type":"text"},"source":["### How do we know if our 'model' is actually 'learning' anything? We need to test it on unseen data.\n","\n","Here we will be designating test inputs to check our model."]},{"cell_type":"code","metadata":{"id":"WaBE6yg6kF2N","colab_type":"code","colab":{}},"source":["x_test = test_df[input_labels]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vPJNTRKmkTwl","colab_type":"text"},"source":["This line of code below gives us the true or actual values for the test inputs.\n"]},{"cell_type":"code","metadata":{"id":"0Xcz9OW6kcAI","colab_type":"code","colab":{}},"source":["y_test = test_df[output_label].values.squeeze()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m7Ii-5ijkX8K","colab_type":"text"},"source":["###Next, we need to figure out what our line thinks the diagnosis is based on our data points\n","\n","#### Exercise: Fill in the appropriate input to this function and run the function below.\n","\n","`y_pred = class_rm.predict(FILL_ME_IN)`"]},{"cell_type":"code","metadata":{"id":"_59Wk6q46XVq","colab_type":"code","colab":{}},"source":["## YOUR CODE HERE\n","\n","y_pred = class_rm.predict(x_test)\n","## END CODE\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EjwNluOxOtoC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"outputId":"d6f7c60f-4dde-447b-ba79-1df30e429afe","executionInfo":{"status":"ok","timestamp":1591739703907,"user_tz":420,"elapsed":1133,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["print(y_pred)"],"execution_count":179,"outputs":[{"output_type":"stream","text":["[1 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 1 0 0 0 1\n"," 1 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1\n"," 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0\n"," 0 0 0 1 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0\n"," 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1\n"," 1 1 0 1 0 0 0 0 1 1 0 0 0 1 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0\n"," 1 0 1 0 0 1]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ensyfit5lP1U","colab_type":"text"},"source":["Run the code below to visualize the results"]},{"cell_type":"code","metadata":{"id":"GUSOLlz8lJu-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"b9b4e80c-a7f6-4f24-ba62-18cc796b3ba6","executionInfo":{"status":"ok","timestamp":1591739703908,"user_tz":420,"elapsed":1012,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["y_pred = y_pred.squeeze()\n","x_test_view = x_test[input_labels].values.squeeze()\n","sns.scatterplot(x = x_test_view, y = y_pred, hue = y_test)\n","plt.xlabel('Radius')\n","plt.ylabel('Predicted')\n","plt.legend()"],"execution_count":180,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f9975f309e8>"]},"metadata":{"tags":[]},"execution_count":180},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"x_DJgPAHlaVQ","colab_type":"text"},"source":["### Finally, let's re-evalute the recall, accuracy, and precision for the model by calling the functions we created."]},{"cell_type":"code","metadata":{"id":"BKz5TfiOTHDl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"f7557bbd-7aaf-4ede-f8db-1ac274384958","executionInfo":{"status":"ok","timestamp":1591739704219,"user_tz":420,"elapsed":1159,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["## YOUR CODE HERE\n","model_stats(y_test, y_pred)\n"],"execution_count":181,"outputs":[{"output_type":"stream","text":["accuracy:  0.8552631578947368\n","precision:  0.7831325301204819\n","recall:  0.8125\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eAi-LWA12aLh","colab_type":"text"},"source":["## What is logistic regression doing? It's giving 'soft' predictions!\n"]},{"cell_type":"code","metadata":{"id":"V0tu5u7Y7CVL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"outputId":"ebe0afd6-2636-4acd-f99b-7d7e0c352df1","executionInfo":{"status":"ok","timestamp":1591739704556,"user_tz":420,"elapsed":1337,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["# Let's visualize the probabilities for `x_test`\n","y_prob = class_rm.predict_proba(x_test)\n","sns.scatterplot(x = x_test_view, y = y_prob[:,1], hue = y_test)"],"execution_count":182,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f9975eb6c88>"]},"metadata":{"tags":[]},"execution_count":182},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"W2YecYWaN04j","colab_type":"text"},"source":["The Y-axis is the  probability of being 'malignant' and the X-axis is the radius mean. \n","\n","**Can you interpret or take a guess about what the graph above is saying?**"]},{"cell_type":"markdown","metadata":{"id":"pDanKBnC9ocw","colab_type":"text"},"source":["## How does logistic regression relate to linear regression? \n"]},{"cell_type":"markdown","metadata":{"id":"zmLI0b9lP663","colab_type":"text"},"source":["\n","Recall that linear regression establishes a relationship between the independent and dependent variables. This is particularly useful when we want to estimate the dependent variable based on the value of the independent variable(s). \n","\n","With logistic regression, we are predicting a probability between 0 and 1 (like whether or not a tumor is malignant or benign). \n","\n","When we look at graphical representations, linear regression will yield a line while logistic regression an S-shaped curve. \n"]},{"cell_type":"markdown","metadata":{"id":"4768savLF9kQ","colab_type":"text"},"source":["## Visualization: linear vs. logistic regression\n","\n"]},{"cell_type":"markdown","metadata":{"id":"nVZQExC5Qhbs","colab_type":"text"},"source":["This plot shows the graphical representations described above. As you can see, the linear model can yield predicted values outside the [0,1] range because it is a continuous linear function. \n","\n","On the other hand, the logistic model stays within our bounds. You can see that the logistic model gives a \"line\" with curvy ends in the [0,1] range, which is the best approximation for a line that will also always respect these boundaries. \n","\n","**Confusingly, the biggest difference between linear and logistic regression is that linear regression is used for regression problems (predicting the value of continuous variables) while logistic regression is used for classification problems!**\n","\n","*Linear Regression:*\n","\n","![Linear Regression](https://i.stack.imgur.com/kW8YP.png)\n","\n","*Logistic Regression:*\n","\n","![Logistic Regression](https://techdifferences.com/wp-content/uploads/2018/01/graph-logistic-regression.jpg)"]},{"cell_type":"markdown","metadata":{"id":"qwV9puGeutSd","colab_type":"text"},"source":["# (Optional) An even better logistic regression! \n","\n","#### Exercise 5\n","\n","Previously, we still just used a single feature to predict diagnosis. Now, let's leverage our input data's many features to build an even better classifier. First, let's set our input labels to be the list of all our features we chose for our dataframe and our output label to be the diagnosis.\n","\n","```\n","input_labels =\n","output_label =\n","```\n"]},{"cell_type":"markdown","metadata":{"id":"b1IA7nNQm5tD","colab_type":"text"},"source":["#### How do you select multiple columns from a pandas Dataframe?\n","\n","```\n","\n","pd.DataFrame[['radius_mean','area_mean']] ## this returns a dataframe\n","\n","\n","pd.DataFrame['area_mean'] ## this returns a pandas Series\n","\n","```"]},{"cell_type":"code","metadata":{"id":"wuT2-qCf8gmA","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE:\n","\n","# END CODE"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xm-DfDR_n2nt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"outputId":"d902482f-a44b-4416-b850-745b271aa69e","executionInfo":{"status":"ok","timestamp":1591739704891,"user_tz":420,"elapsed":932,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["#@title Let's visualize our selection { display-mode: \"form\" }\n","\n","x_train = train_df[input_labels]\n","print('Our x variables')\n","print(x_train.head())\n","print('\\n\\n')\n","y_train = train_df[output_label]\n","print('Our y variable:')\n","print(y_train.head())"],"execution_count":184,"outputs":[{"output_type":"stream","text":["Our x variables\n","     radius_mean\n","164       23.270\n","13        15.850\n","430       14.900\n","61         8.598\n","427       10.800\n","\n","\n","\n","Our y variable:\n","164    1\n","13     1\n","430    1\n","61     0\n","427    0\n","Name: diagnosis, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_UA2kNtUodqz","colab_type":"text"},"source":["**Challenge Exercise:** Now see if you can copy the code from above and build a logistic regression model that uses multiple input variables to make the prediction."]},{"cell_type":"code","metadata":{"id":"mT460Ui1oc4q","colab_type":"code","colab":{}},"source":["## YOUR CODE HERE\n","input_labels = ['radius_mean','area_mean', 'radius_se', 'area_se', 'smoothness_mean','smoothness_se']\n","output_label = 'diagnosis'\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xc7Yl1YfAG9z","colab_type":"code","outputId":"125a60ac-435f-45bc-fcd9-5fa141ef4e0a","executionInfo":{"status":"ok","timestamp":1591739705119,"user_tz":420,"elapsed":907,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["model_stats(y_test, y_pred)\n"],"execution_count":186,"outputs":[{"output_type":"stream","text":["accuracy:  0.8552631578947368\n","precision:  0.7831325301204819\n","recall:  0.8125\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bCP5dB9dvJ1x","colab_type":"text"},"source":["# (Optional) Decision Trees Walkthrough\n","\n","Finally, let's try a different classification model: decision trees! Recall that with decision trees, we choose features that create the best splits of our dataset (separates it into classes as best it can at that time)."]},{"cell_type":"code","metadata":{"id":"VbpWRKvyTedY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"a3437b41-b7df-428b-ad98-6d28f997fc0a","executionInfo":{"status":"ok","timestamp":1591739705123,"user_tz":420,"elapsed":752,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["#@title Create the model { display-mode: \"both\" }\n","from sklearn import tree\n","\n","# We'll first specify what model we want, in this case a decision tree\n","class_dt = tree.DecisionTreeClassifier(max_depth=2)\n","\n","# We use our previous `x_train` and `y_train` sets to build the model\n","class_dt.fit(x_train, y_train)"],"execution_count":187,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n","                       max_depth=2, max_features=None, max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort='deprecated',\n","                       random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":187}]},{"cell_type":"code","metadata":{"id":"2PpoiLD77HkK","colab_type":"code","cellView":"both","colab":{"base_uri":"https://localhost:8080/","height":367},"outputId":"be21dc05-6554-461c-cb1c-c6c22ea670ac","executionInfo":{"status":"ok","timestamp":1591739705124,"user_tz":420,"elapsed":649,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["#@title Visualize and interpret the tree\n","tree.plot_tree(class_dt) "],"execution_count":188,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Text(167.4, 181.2, 'X[0] <= 15.05\\ngini = 0.475\\nsamples = 341\\nvalue = [209, 132]'),\n"," Text(83.7, 108.72, 'X[0] <= 13.095\\ngini = 0.23\\nsamples = 234\\nvalue = [203, 31]'),\n"," Text(41.85, 36.23999999999998, 'gini = 0.062\\nsamples = 157\\nvalue = [152, 5]'),\n"," Text(125.55000000000001, 36.23999999999998, 'gini = 0.447\\nsamples = 77\\nvalue = [51, 26]'),\n"," Text(251.10000000000002, 108.72, 'X[0] <= 16.575\\ngini = 0.106\\nsamples = 107\\nvalue = [6, 101]'),\n"," Text(209.25, 36.23999999999998, 'gini = 0.302\\nsamples = 27\\nvalue = [5, 22]'),\n"," Text(292.95, 36.23999999999998, 'gini = 0.025\\nsamples = 80\\nvalue = [1, 79]')]"]},"metadata":{"tags":[]},"execution_count":188},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"IKUiw9KdUQBs","colab_type":"code","colab":{}},"source":["#@title Find the predictions based on the model { display-mode: \"both\" }\n","# now let's see how it performed!\n","y_pred = class_dt.predict(x_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FcJmeOmFUaHP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"36ec4bdf-ff9d-4f62-c238-904bef050f87","executionInfo":{"status":"ok","timestamp":1591739705318,"user_tz":420,"elapsed":668,"user":{"displayName":"Allen Ye","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjT32RaueCSMD0oKveGz22e1GjwiEGTr10YJkRpeA=s64","userId":"09259713371275613424"}}},"source":["\n","#@title Calculate model performance { display-mode: \"both\" }\n","model_stats(y_test, y_pred)"],"execution_count":190,"outputs":[{"output_type":"stream","text":["accuracy:  0.8859649122807017\n","precision:  0.921875\n","recall:  0.7375\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"E73C1cXI7e_N","colab_type":"text"},"source":["**Question: What features are included in this classifier? How might you interpret this tree? Did this do better than the logistic regression?**"]},{"cell_type":"code","metadata":{"id":"NLm1hIPJFGXD","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}